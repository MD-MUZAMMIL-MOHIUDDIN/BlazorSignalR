@page "/groups/delete"
@inject Blazorwebserverapp.Data.ApplicationDbContext DB
@using Blazorwebserverapp.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Group</h4>
    <hr />
    @if (group is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">GroupName</dt>
            <dd class="col-sm-10">@group.GroupName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedAt</dt>
            <dd class="col-sm-10">@group.CreatedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DeletedAt</dt>
            <dd class="col-sm-10">@group.DeletedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">GroupDescription</dt>
            <dd class="col-sm-10">@group.GroupDescription</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">GroupIcon</dt>
            <dd class="col-sm-10">@group.GroupIcon</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsDeleted</dt>
            <dd class="col-sm-10">@group.IsDeleted</dd>
        </dl>
        <EditForm method="post" Model="group" OnValidSubmit="DeleteGroup" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(group is null)">Delete</button> |
            <a href="/groups">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Group? group;

    [SupplyParameterFromQuery]
    public string GroupId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        group = await DB.Group.FirstOrDefaultAsync(m => m.GroupId == GroupId);

        if (group is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteGroup()
    {
        DB.Group.Remove(group!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/groups");
    }
}
